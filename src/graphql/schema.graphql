scalar Date
scalar Upload

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

input UpdateUserDetailsPayload {
  firstName: String
  lastName: String
  rating: Int
}

input ConfigPayload {
  totalRounds: Int
  maxPunchDown: Int
  performanceWeight: Int
}

input UpdateTournamentPayload {
  name: String
  date: Date
  status: TournamentStatus
  pairingAlgorithm: PairingAlgorithm
  isDeleted: Boolean
  config: ConfigPayload
}

input UpdateMatchPayload {
  rating: Int!
}

input UpdateOrganizationPayload {
  name: String!
}

type TournamentUpdateResult {
  tournament: Tournament!
  newRound: Boolean!
}

type JoinTournamentResult {
  tournamentId: String!
}

type User {
  _id: String!
  firstName: String
  lastName: String
  phone: String!
  photo: String
  rating: Int
  matchesPlayed: Int
  role: Role!
  token: String
  organizationId: String
}

enum Role {
  admin
  player
}

enum MatchResult {
  whiteWon
  blackWon
  draw
  didNotStart
}

enum TournamentStatus {
  created
  active
  completed
}

enum PairingAlgorithm {
  swiss
  rating
}

type MatchWithUserInfo {
  _id: String!
  tournamentId: String!
  white: User
  black: User
  whiteRating: Int!
  blackRating: Int!
  whiteScore: Float!
  blackScore: Float!
  newWhiteRating: Int
  newBlackRating: Int
  whiteMatchesPlayed: Int!
  blackMatchesPlayed: Int!
  boardNumber: Int!
  result: MatchResult!
  completed: Boolean!
}

type Standing {
  _id: ID!
  userId: String!
  position: Int!
  score: Float!
  win: Int!
  loss: Int!
  draw: Int!
  bye: Int!
}

type Round {
  _id: String!
  completed: Boolean!
  matches: [MatchWithUserInfo!]!
}

type RoundPreview {
  _id: String!
  completed: Boolean!
  matches: [String!]!
}

type Config {
  totalRounds: Int!
  maxPunchDown: Int!
  performanceWeight: Int!
}

type Tournament {
  _id: String!
  name: String!
  date: Date!
  status: TournamentStatus!
  players: [String!]!
  rounds: [RoundPreview!]!
  standings: [Standing!]!
  config: Config!
  pairingAlgorithm: PairingAlgorithm!
  location: String
  organizationId: String!
}

type TournamentWithOrganization {
  _id: String!
  name: String!
  date: Date!
  status: TournamentStatus!
  players: [String!]!
  rounds: [RoundPreview!]!
  standings: [Standing!]!
  config: Config!
  pairingAlgorithm: PairingAlgorithm!
  location: String
  organizationId: String!
  organization: Organization
}

type Organization {
  _id: String!
  name: String!
}

type Query {
  me: User
  getUser(userId: ID!): User
  getUsers(userIds: [ID!]!, filterTerm: String): [User!]!

  getMyTournament: Tournament
  getTournaments: [TournamentWithOrganization!]!
  getTournament(tournamentId: ID!): Tournament

  getMatch(matchId: ID!): MatchWithUserInfo
  getMyMatch(tournamentId: ID!): MatchWithUserInfo
  getRound(tournamentId: ID!, roundId: ID!): Round

  getOrganization(organizationId: ID!): Organization
  getOrganizations: [Organization!]!
}

type Mutation {
  # Tournament
  completeRound(tournamentId: ID!, newRound: Boolean!, textAlert: Boolean!): Boolean!
  deleteRound(tournamentId: ID!, roundId: ID!): Boolean!
  joinTournament(tournamentId: ID!, userId: ID!): JoinTournamentResult!
  autoJoinTournament(organizationId: ID!): JoinTournamentResult!
  kickPlayer(tournamentId: ID!, userId: ID!): Boolean!
  createTournament(name: String!): Boolean!
  updateTournament(tournamentId: ID!, payload: UpdateTournamentPayload!): Boolean!

  # User
  verifyCode(code: String!): User
  uploadPhoto(photo: Upload!): Boolean!
  deletePhoto: Boolean!
  sendVerificationCode(phone: String!): Boolean!
  updateUserDetails(payload: UpdateUserDetailsPayload!): Boolean!

  # Match
  updateMatch(matchId: ID!, payload: UpdateMatchPayload!): Boolean!
  deleteMatch(tournamentId: ID!, roundId: ID!, matchId: ID!): Boolean!

  # Organization
  createOrganization: Organization!
  updateOrganization(
    organizationId: ID!
    payload: UpdateOrganizationPayload!
  ): Boolean!
}

type Subscription {
  matchUpdated(matchIds: [ID!]!): MatchWithUserInfo
  tournamentUpdated(tournamentIds: [ID!]!): TournamentUpdateResult
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}